@page "/userAccount"

@using TinyMCE.Blazor
@using fr.Models
@using fr.MyData
@using System.Linq

@inherits LayoutComponentBase
@inject MyApplicationState AppState
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<h3>Профиль</h3>
<div class="container d-flex flex-row flex-wrap">
    <div class="col-sm-12 col-md-6 col-lg-4 p-2">
        <div class="container">
            <h4>Статистика фрилансера</h4>
        </div>
        <div class="container">
            <p class="text-primary">Вполненных заказов: 25</p>
        </div>
        <div class="container">
            <p class="text-primary">Зарегестрирован с: 05.02.2024</p>
        </div>
        <div class="container">
        </div>
    </div>
    <div class="col-sm-12 col-md-6 col-lg-4 p-2">
        <div class="container py-1 px-2">
            <input class="form-control" type="text" placeholder="@AppState.currentUser.Name" aria-label="default input example" @bind-value="Name">
        </div>
        <div class="container d-flex my-2">
            <p>Выберите свои навыки(до 3)</p>
            <select class="form-select" aria-label="Категории" @onchange="CategorySelected">
                <option value="">Выберите категорию</option>
                @using(var dbContext = new FreelaceContext())
                {
                    int count = 1;
                    var categories = (from a in dbContext.Categories
                                      select a).ToList();
                    foreach(var g in categories)
                    {
                        <option value="@count">@g.CtegoryName</option>
                        count++;
                    }
                }
            </select>
        </div>
        <div class="container py-1 px-2">
            @if(@AppState.currentUser.Category1 != null)
            {
                <span>@Cat1</span>
                <i class="bi bi-x-square" @onclick="deleteFirstCategory"></i>
            }
            @if(@AppState.currentUser.Category2 != null)
            {
                <span>@Cat2</span>
                <i class="bi bi-x-square" @onclick="deleteSecondCategory"></i>
            }
            @if(@AppState.currentUser.Category3 != null)
            {
                <span>@Cat3</span>
                <i class="bi bi-x-square" @onclick="deleteThirdCategory"></i>
            }
        </div>
    </div>
    <div class="col-lg-2 col-md-4 col-sm-7 d-flex flex-column align-items-center">
        <img class="col-12" src="@($"data:image/jpeg;base64,{base64String}")" />
        <InputFile OnChange="LoadFiles" accept=".jpg, .jpeg, .png" class="btn btn-primary col-9 mt-2">
        </InputFile>
    </div>
</div>
<div class="container d-flex flex-column align-item-start">
    <Editor @bind-Value="@tinyMCEContent" />
    <button class="btn btn-dark col-3" @onclick="SaveData">Save</button>
    <p class="text-primary-emphasis h5 col-12">@((MarkupString)data)</p>
</div>
<div class="container d-flex justify-content-end">
    <button class="btn btn-primary" @onclick="saveChanges">Сохранить изменения</button>
</div>
<h3>Portfolio</h3>
<div class="container">
    <div class="d-flex h-50">
        <div id="carouselExampleCaptions" class="carousel carousel-dark slide" data-bs-ride="carousel">
            <div class="carousel-indicators">
                <button type="button" data-bs-target="#carouselExampleCaptions" data-bs-slide-to="0" class="active" aria-current="true" aria-label="Slide 1"></button>
                <button type="button" data-bs-target="#carouselExampleCaptions" data-bs-slide-to="1" aria-label="Slide 2"></button>
                <button type="button" data-bs-target="#carouselExampleCaptions" data-bs-slide-to="2" aria-label="Slide 3"></button>
            </div>
            <div class="carousel-inner">
                <div class="carousel-item active">
                    <img src="/images/pngegg.png" class="d-block w-50 mx-auto" alt="...">
                    <div class="card-body">
                        <div class="carousel-caption d-none d-sm-block">
                            <p class="card-text">First slide </p>
                            <a href="#" class="btn btn-primary">Visit</a>
                        </div>
                    </div>
                </div>
                <div class="carousel-item">
                    <img src="/images/pngegg.png" class="d-block w-50 mx-auto">
                    <div class="card-body">
                        <div class="carousel-caption d-none d-sm-block">
                            <p class="card-text">Second slide </p>
                            <a href="#" class="btn btn-primary">Visit</a>
                        </div>
                    </div>
                </div>
                <div class="carousel-item">
                    <img src="/images/pngegg.png" class="d-block w-50 mx-auto" alt="...">
                    <div class="card-body">
                        <div class="carousel-caption d-none d-sm-block">
                            <p class="card-text">third slide </p>
                            <a href="#" class="btn btn-primary">Visit</a>
                        </div>
                    </div>
                </div>
            </div>
            <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleCaptions" data-bs-slide="prev">
                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                <span class="visually-hidden">Предыдущий</span>
            </button>
            <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleCaptions" data-bs-slide="next">
                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                <span class="visually-hidden">Следующий</span>
            </button>
        </div>
    </div>
    <div class="container d-flex">
        <button class="btn btn-primary">Добавить работу</button>
    </div>
</div>

@code {

    private string tinyMCEContent { get; set; }
    string? data;
    string? base64String;
    string Cat1;
    string Cat2;
    string Cat3;
//Нужно изменить наименование переменных с Cat1, Cat2 .... на firstCategory, secondCategory
    string Name;
    [Parameter]
    public User userId { get; set; }


    protected override async void OnInitialized()
    {
        // Получаем сегменты пути из текущего URL
        var uriSegments = NavigationManager.ToAbsoluteUri(NavigationManager.Uri).Segments;

        // Получаем userId из последнего сегмента пути
        var userId = uriSegments[uriSegments.Length - 1];
        if (AppState.currentUser.Description != null)
        {
            data = AppState.currentUser.Description;
        }
        if(AppState.currentUser.Photo != null)
        {
            base64String = Convert.ToBase64String(AppState.currentUser.Photo);
        }
        using(var dbContext = new FreelaceContext())
        {
            try
            {
                if(AppState.currentUser.Category1 != null)
                {
                    var f = await (from a in dbContext.Categories
                                   where a.CategoryId == AppState.currentUser.Category1
                                   select a).SingleAsync();
                    Cat1 = f.CtegoryName;
                }
                if(AppState.currentUser.Category2 != null)
                {
                    var f = await (from a in dbContext.Categories
                                   where a.CategoryId == AppState.currentUser.Category2
                                   select a).SingleAsync();
                    Cat2 = f.CtegoryName;
                }
                if(AppState.currentUser.Category3 != null)
                {
                    var f = await (from a in dbContext.Categories
                                   where a.CategoryId == AppState.currentUser.Category3
                                   select a).SingleAsync();
                    Cat3 = f.CtegoryName;
                }
            }
            catch
            {

            }
            StateHasChanged();
        }

    }


    private async Task SaveData()
    {
        data = tinyMCEContent;
        AppState.currentUser.Description = data;

    }

    private async void LoadFiles(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            var ms = new MemoryStream();
            await file.OpenReadStream().CopyToAsync(ms);
            byte[] imageBytes = ms.ToArray();
            base64String = Convert.ToBase64String(imageBytes);
            AppState.currentUser.Photo = imageBytes;
            StateHasChanged();
        }
    }

    private async void CategorySelected(ChangeEventArgs e)
    {
        string selectedCategory;
        selectedCategory = e.Value.ToString();
        try
        {
            using(var db = new FreelaceContext())
            {
                var category = await(from a in db.Categories
                                      where a.CategoryId == Convert.ToInt32(selectedCategory)
                                      select a).FirstOrDefaultAsync();
                if(AppState.currentUser.Category1 == null )
                {
                    AppState.currentUser.Category1 = Convert.ToInt32(selectedCategory);
                    Cat1 = category.CtegoryName;
                    StateHasChanged();
                    return;
                }
                if(AppState.currentUser.Category2 == null && AppState.currentUser.Category1 != null)
                {
                    AppState.currentUser.Category2 = Convert.ToInt32(selectedCategory);
                    Cat2 = category.CtegoryName;
                    StateHasChanged();
                    return;
                }
                if(AppState.currentUser.Category3 == null || (AppState.currentUser.Category2 != null && AppState.currentUser.Category1 != null))
                {
                    AppState.currentUser.Category3 = Convert.ToInt32(selectedCategory);
                    Cat3 = category.CtegoryName;
                    StateHasChanged();
                    return;
                }
            }
        }
        catch
        {

        }
    }

    private void deleteFirstCategory()
    {
        AppState.currentUser.Category1 = null;
        StateHasChanged();
    }

    private void deleteSecondCategory()
    {
        AppState.currentUser.Category2 = null;
        StateHasChanged();
    }

    private void deleteThirdCategory()
    {
        AppState.currentUser.Category3 = null;
        StateHasChanged();
    }

    private void saveChanges()
    {
        using(var db = new FreelaceContext())
        {
            var user = (from a in db.Users
                        where a.UserId == AppState.currentUser.UserId
                        select a).Single();
            user.Photo = AppState.currentUser.Photo;
            user.Description = AppState.currentUser.Description;
            user.Category1 = AppState.currentUser.Category1;
            user.Category2 = AppState.currentUser.Category2;
            user.Category3 = AppState.currentUser.Category3;
            user.Name = Name;
            db.SaveChanges();
        }
    }
}
